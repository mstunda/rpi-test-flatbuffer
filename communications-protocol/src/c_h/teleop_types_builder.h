#ifndef TELEOP_TYPES_BUILDER_H
#define TELEOP_TYPES_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef TELEOP_TYPES_READER_H
#include "teleop_types_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __getugo_Header_formal_args , int64_t v0
#define __getugo_Header_call_args , v0
static inline getugo_Header_t *getugo_Header_assign(getugo_Header_t *p, int64_t v0)
{ p->timestamp = v0;
  return p; }
static inline getugo_Header_t *getugo_Header_copy(getugo_Header_t *p, const getugo_Header_t *p2)
{ p->timestamp = p2->timestamp;
  return p; }
static inline getugo_Header_t *getugo_Header_assign_to_pe(getugo_Header_t *p, int64_t v0)
{ flatbuffers_int64_assign_to_pe(&p->timestamp, v0);
  return p; }
static inline getugo_Header_t *getugo_Header_copy_to_pe(getugo_Header_t *p, const getugo_Header_t *p2)
{ flatbuffers_int64_copy_to_pe(&p->timestamp, &p2->timestamp);
  return p; }
static inline getugo_Header_t *getugo_Header_assign_from_pe(getugo_Header_t *p, int64_t v0)
{ flatbuffers_int64_assign_from_pe(&p->timestamp, v0);
  return p; }
static inline getugo_Header_t *getugo_Header_copy_from_pe(getugo_Header_t *p, const getugo_Header_t *p2)
{ flatbuffers_int64_copy_from_pe(&p->timestamp, &p2->timestamp);
  return p; }
__flatbuffers_build_struct(flatbuffers_, getugo_Header, 8, 8, getugo_Header_identifier, getugo_Header_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, getugo_Header, getugo_Header_t)

static const flatbuffers_voffset_t __getugo_EgoPose_required[] = { 0 };
typedef flatbuffers_ref_t getugo_EgoPose_ref_t;
static getugo_EgoPose_ref_t getugo_EgoPose_clone(flatbuffers_builder_t *B, getugo_EgoPose_table_t t);
__flatbuffers_build_table(flatbuffers_, getugo_EgoPose, 3)

static const flatbuffers_voffset_t __getugo_Ping_required[] = { 0 };
typedef flatbuffers_ref_t getugo_Ping_ref_t;
static getugo_Ping_ref_t getugo_Ping_clone(flatbuffers_builder_t *B, getugo_Ping_table_t t);
__flatbuffers_build_table(flatbuffers_, getugo_Ping, 0)

static const flatbuffers_voffset_t __getugo_Pong_required[] = { 0 };
typedef flatbuffers_ref_t getugo_Pong_ref_t;
static getugo_Pong_ref_t getugo_Pong_clone(flatbuffers_builder_t *B, getugo_Pong_table_t t);
__flatbuffers_build_table(flatbuffers_, getugo_Pong, 0)

static const flatbuffers_voffset_t __getugo_CameraRequest_required[] = { 0 };
typedef flatbuffers_ref_t getugo_CameraRequest_ref_t;
static getugo_CameraRequest_ref_t getugo_CameraRequest_clone(flatbuffers_builder_t *B, getugo_CameraRequest_table_t t);
__flatbuffers_build_table(flatbuffers_, getugo_CameraRequest, 1)

#define __getugo_EgoPose_formal_args , double v0, double v1, float v2
#define __getugo_EgoPose_call_args , v0, v1, v2
static inline getugo_EgoPose_ref_t getugo_EgoPose_create(flatbuffers_builder_t *B __getugo_EgoPose_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, getugo_EgoPose, getugo_EgoPose_identifier, getugo_EgoPose_type_identifier)

#define __getugo_Ping_formal_args 
#define __getugo_Ping_call_args 
static inline getugo_Ping_ref_t getugo_Ping_create(flatbuffers_builder_t *B __getugo_Ping_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, getugo_Ping, getugo_Ping_identifier, getugo_Ping_type_identifier)

#define __getugo_Pong_formal_args 
#define __getugo_Pong_call_args 
static inline getugo_Pong_ref_t getugo_Pong_create(flatbuffers_builder_t *B __getugo_Pong_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, getugo_Pong, getugo_Pong_identifier, getugo_Pong_type_identifier)

#define __getugo_CameraRequest_formal_args , int8_t v0
#define __getugo_CameraRequest_call_args , v0
static inline getugo_CameraRequest_ref_t getugo_CameraRequest_create(flatbuffers_builder_t *B __getugo_CameraRequest_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, getugo_CameraRequest, getugo_CameraRequest_identifier, getugo_CameraRequest_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, getugo_EgoPose_latitude, flatbuffers_double, double, 8, 8, 0.000000, getugo_EgoPose)
__flatbuffers_build_scalar_field(1, flatbuffers_, getugo_EgoPose_longitude, flatbuffers_double, double, 8, 8, 0.000000, getugo_EgoPose)
__flatbuffers_build_scalar_field(2, flatbuffers_, getugo_EgoPose_heading, flatbuffers_float, float, 4, 4, 0.000000f, getugo_EgoPose)

static inline getugo_EgoPose_ref_t getugo_EgoPose_create(flatbuffers_builder_t *B __getugo_EgoPose_formal_args)
{
    if (getugo_EgoPose_start(B)
        || getugo_EgoPose_latitude_add(B, v0)
        || getugo_EgoPose_longitude_add(B, v1)
        || getugo_EgoPose_heading_add(B, v2)) {
        return 0;
    }
    return getugo_EgoPose_end(B);
}

static getugo_EgoPose_ref_t getugo_EgoPose_clone(flatbuffers_builder_t *B, getugo_EgoPose_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (getugo_EgoPose_start(B)
        || getugo_EgoPose_latitude_pick(B, t)
        || getugo_EgoPose_longitude_pick(B, t)
        || getugo_EgoPose_heading_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, getugo_EgoPose_end(B));
}


static inline getugo_Ping_ref_t getugo_Ping_create(flatbuffers_builder_t *B __getugo_Ping_formal_args)
{
    if (getugo_Ping_start(B)) {
        return 0;
    }
    return getugo_Ping_end(B);
}

static getugo_Ping_ref_t getugo_Ping_clone(flatbuffers_builder_t *B, getugo_Ping_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (getugo_Ping_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, getugo_Ping_end(B));
}


static inline getugo_Pong_ref_t getugo_Pong_create(flatbuffers_builder_t *B __getugo_Pong_formal_args)
{
    if (getugo_Pong_start(B)) {
        return 0;
    }
    return getugo_Pong_end(B);
}

static getugo_Pong_ref_t getugo_Pong_clone(flatbuffers_builder_t *B, getugo_Pong_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (getugo_Pong_start(B)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, getugo_Pong_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, getugo_CameraRequest_camera_id, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), getugo_CameraRequest)

static inline getugo_CameraRequest_ref_t getugo_CameraRequest_create(flatbuffers_builder_t *B __getugo_CameraRequest_formal_args)
{
    if (getugo_CameraRequest_start(B)
        || getugo_CameraRequest_camera_id_add(B, v0)) {
        return 0;
    }
    return getugo_CameraRequest_end(B);
}

static getugo_CameraRequest_ref_t getugo_CameraRequest_clone(flatbuffers_builder_t *B, getugo_CameraRequest_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (getugo_CameraRequest_start(B)
        || getugo_CameraRequest_camera_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, getugo_CameraRequest_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TELEOP_TYPES_BUILDER_H */
